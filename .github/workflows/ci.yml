name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Test Flask application
        run: |
          export FLASK_ENV=testing
          python -c "
          import app
          from config import config

          # Test configuration loading
          assert app.app.config['TESTING'] == True
          print('✅ Configuration test passed')

          # Test Flask app creation
          with app.app.test_client() as client:
              response = client.get('/')
              assert response.status_code == 200
              assert 'Server is running' in response.get_data(as_text=True)
              print('✅ Health check test passed')

          print('✅ All tests passed')
          "

      - name: Test API endpoints
        run: |
          export FLASK_ENV=testing
          python -c "
          import app
          import json
          import base64
          from PIL import Image
          import io

          # Create test image
          img = Image.new('RGB', (32, 32), color='white')
          buffer = io.BytesIO()
          img.save(buffer, format='PNG')
          img_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')

          # Test processing endpoint
          with app.app.test_client() as client:
              data = {
                  'image_base64': img_base64,
                  'layers': [{
                      'type': 'conv',
                      'kernel_type': 'sharpen',
                      'stride': 1,
                      'padding': 1,
                      'out_channels': 3
                  }]
              }
              response = client.post('/process-layers', 
                                   data=json.dumps(data),
                                   content_type='application/json')
              assert response.status_code == 200
              result = json.loads(response.get_data(as_text=True))
              assert result['success'] == True
              print('✅ API endpoint test passed')
          "

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for security vulnerabilities
        run: |
          # Check dependencies for known vulnerabilities
          safety check

          # Run bandit security linter
          bandit -r . -f json -o bandit-report.json || true

          # Display bandit results
          if [ -f bandit-report.json ]; then
            echo "Security scan completed. Check bandit-report.json for details."
          fi

  build-docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker files
        run: |
          python deploy.py --mode docker

      - name: Build Docker image
        run: |
          docker build -t visual-nn:latest .

      - name: Test Docker container
        run: |
          # Start container in background
          docker run -d -p 5001:5001 --name test-container visual-nn:latest

          # Wait for container to start
          sleep 10

          # Test health check
          curl -f http://localhost:5001/ || exit 1

          # Clean up
          docker stop test-container
          docker rm test-container

          echo "✅ Docker build and test passed"
