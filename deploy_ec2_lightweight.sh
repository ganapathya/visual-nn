#!/bin/bash
# EC2 Deployment Script for Visual-NN Lightweight with Gemini AI

echo "🧠 Deploying Visual-NN Lightweight + Gemini AI to EC2"
echo "====================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}❌ Please run as root: sudo $0${NC}"
    exit 1
fi

echo -e "${YELLOW}📦 Step 1: System Update${NC}"
apt update && apt upgrade -y

echo -e "${YELLOW}📦 Step 2: Install Dependencies${NC}"
apt install -y python3 python3-pip python3-venv nginx git curl

echo -e "${YELLOW}📦 Step 3: Install uv package manager${NC}"
curl -LsSf https://astral.sh/uv/install.sh | sh
export PATH="/root/.cargo/bin:$PATH"

echo -e "${YELLOW}📂 Step 4: Setup Application Directory${NC}"
mkdir -p /opt/visual-nn
cd /opt/visual-nn

# If git repo exists, pull latest
if [ -d ".git" ]; then
    echo "📥 Updating existing repository..."
    git pull origin main
else
    echo "📥 Cloning repository..."
    git clone https://github.com/your-username/visual-nn.git .
fi

echo -e "${YELLOW}🐍 Step 5: Setup Python Environment${NC}"
python3 -m venv venv
source venv/bin/activate

# Install dependencies using uv if available, pip as fallback
if command -v uv &> /dev/null; then
    echo "Using uv for package installation..."
    uv pip install -r requirements.txt
else
    echo "Using pip for package installation..."
    pip install -r requirements.txt
fi

echo -e "${YELLOW}🔧 Step 6: Configure Environment${NC}"
# Copy environment template
cp env.example .env

# Get Gemini API key from user
echo -e "${YELLOW}🔑 Gemini API Key Configuration${NC}"
echo "Please enter your Gemini API key (get from: https://makersuite.google.com/app/apikey):"
read -r GEMINI_API_KEY

if [ -n "$GEMINI_API_KEY" ]; then
    # Update .env file
    sed -i "s/GEMINI_API_KEY=your_gemini_api_key_here/GEMINI_API_KEY=$GEMINI_API_KEY/" .env
    sed -i "s/FLASK_ENV=development/FLASK_ENV=production/" .env
    sed -i "s/SECRET_KEY=your_secret_key_here/SECRET_KEY=$(openssl rand -hex 32)/" .env
    echo -e "${GREEN}✅ API key configured${NC}"
else
    echo -e "${YELLOW}⚠️ No API key provided - app will run in manual mode${NC}"
fi

echo -e "${YELLOW}🌐 Step 7: Configure Frontend for EC2${NC}"
# Get EC2 public IP
EC2_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
echo "EC2 Public IP: $EC2_IP"

# Configure frontend to use Nginx proxy
cat > config.js << EOF
/**
 * Frontend Configuration for Visual-NN on EC2
 * Generated by deploy_ec2_lightweight.sh
 */

// Use relative URLs since Nginx will proxy /api/ to Flask
window.BACKEND_URL = window.location.origin + '/api';

console.log('🔧 Backend configured for EC2 with Nginx proxy');
EOF

echo -e "${YELLOW}🔧 Step 8: Configure Nginx${NC}"
cat > /etc/nginx/sites-available/visual-nn << 'EOF'
server {
    listen 80;
    server_name _;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    # Serve static files (frontend)
    location / {
        root /opt/visual-nn;
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Proxy API requests to Flask
    location /api/ {
        # Remove /api prefix before forwarding
        rewrite ^/api/(.*)$ /$1 break;
        
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle CORS
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        # Increase timeout for AI processing
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Increase body size for image uploads
        client_max_body_size 10M;
    }
}
EOF

# Enable the site
ln -sf /etc/nginx/sites-available/visual-nn /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# Test nginx configuration
nginx -t
if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Nginx configuration valid${NC}"
    systemctl restart nginx
    systemctl enable nginx
else
    echo -e "${RED}❌ Nginx configuration error${NC}"
    exit 1
fi

echo -e "${YELLOW}🔧 Step 9: Setup Systemd Service${NC}"
cat > /etc/systemd/system/visual-nn.service << EOF
[Unit]
Description=Visual-NN Lightweight Flask Application
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/visual-nn
Environment=PATH=/opt/visual-nn/venv/bin
Environment=FLASK_ENV=production
Environment=PYTHONPATH=/opt/visual-nn
ExecStart=/opt/visual-nn/venv/bin/python app.py
Restart=always
RestartSec=3

# Memory optimization for t3.micro
Environment=PYTHONOPTIMIZE=1
Environment=PYTHONHASHSEED=0

# Load environment variables from .env file
EnvironmentFile=/opt/visual-nn/.env

[Install]
WantedBy=multi-user.target
EOF

# Reload systemd and start services
systemctl daemon-reload
systemctl enable visual-nn
systemctl start visual-nn

echo -e "${YELLOW}⏱️ Step 10: Verify Deployment${NC}"
sleep 5

# Check Flask service
if systemctl is-active --quiet visual-nn; then
    echo -e "${GREEN}✅ Flask service is running${NC}"
else
    echo -e "${RED}❌ Flask service failed to start${NC}"
    systemctl status visual-nn
fi

# Check Nginx service
if systemctl is-active --quiet nginx; then
    echo -e "${GREEN}✅ Nginx service is running${NC}"
else
    echo -e "${RED}❌ Nginx service failed to start${NC}"
    systemctl status nginx
fi

# Test endpoints
echo "🧪 Testing endpoints..."
curl -s http://localhost/api/health > /dev/null
if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ API endpoint responding${NC}"
else
    echo -e "${YELLOW}⚠️ API endpoint not responding yet (may need a moment)${NC}"
fi

echo ""
echo -e "${GREEN}🎉 Deployment Complete!${NC}"
echo ""
echo "📋 Access Information:"
echo "   🌐 Web UI: http://$EC2_IP"
echo "   🔌 API Health: http://$EC2_IP/api/health"
echo "   📊 System Status:"
echo "     • Flask: systemctl status visual-nn"
echo "     • Nginx: systemctl status nginx"
echo ""
echo "🔧 Configuration Files:"
echo "   • App: /opt/visual-nn/"
echo "   • Nginx: /etc/nginx/sites-available/visual-nn"
echo "   • Service: /etc/systemd/system/visual-nn.service"
echo "   • Environment: /opt/visual-nn/.env"
echo ""
echo "🚀 Next Steps:"
echo "   1. Open http://$EC2_IP in your browser"
echo "   2. Upload an image to test AI features"
echo "   3. Monitor logs: journalctl -u visual-nn -f"
echo ""
if [ -n "$GEMINI_API_KEY" ]; then
    echo -e "${GREEN}🧠 AI Features: ENABLED${NC}"
else
    echo -e "${YELLOW}🧠 AI Features: DISABLED (no API key)${NC}"
    echo "   To enable: edit /opt/visual-nn/.env and add GEMINI_API_KEY"
fi
